Ao criar uma variavel nao objeto é defido um quadrado com o valor la dentro
Num objeto é criado um quadrado com a posição da memória

Vantagens POO:
-Duplicação de código
-Responsabilidades em cada classe

Locale.setDefault(Locale.US); //mudar regiao por causa da virgula e ponto - casas decimais
double x = 10.2626452; int y = 3; String var = "ola"; char letra = 'A';
soutf("Double: %f - Inteiro: %d - String: %s - Letra: %c", x, y, var, letra);

int a=5, b=2; System.out.println(a/b); System.out.println((double)a/b); //Truncado e valor real

//INCREMENTO
//num=num+1
//num+=1
//num++  --> valor antigo será usado para o cálculo
//++num  --> valor antigo não será usado para o cálculo

Math.pow(5, 2)
Math.sqrt(25)

Membros de instância vs Membros estáticos/de classe
-Membros de instância tem valor diferente para cada objeto  +  É preciso instanciar
-Membros estáticos tem o mesmo valor para diferentes objetos (chamados com o nome da classe: Math.sqrt()) + não é preciso instanciar (usados para dados e funções nunca irão se modificar)

-Triangle x = new Triangle(); x.area()-> 6 --> Membros de instância (valor para cada objeto - correto)
-Triangle y = new Triangle(); x.area()-> 4 --> Membros de instância (valor para cada objeto - correto)

-Calculator calc1 = new Calculator(); calc1.PI()-> 3.14 --> Membros estáticos (não totalmente certo)
-Calculator calc2 = new Calculator(); calc2.PI()-> 3.14 --> Membros estáticos (não totalmente certo)
-double c = Calculator.PI -> Membros estáticos - Não é preciso instanciar objetos (o mais correto)

Apenas "métodos static" podem ser chamados no public static void main(String[] args) {}
Para chamar diretamente um método de uma classe(sem instanciar - Classe.metodo() ), então o método terá de ser "static"

final - valor não altera

Construtor - é o que é executado na instânciação do objeto (iniciar valores)
Sobrecarga - mais de um construtor
this - referência para o próprio objeto (distinguir atributos e variaveis locais ou passar objeto como argumento)
Encapsulamento - consiste em esconder detalhes de implementação (getters e setters e modificadores private)

modificadores - private, public, protected

----------------------------------------------------
Tipos de Referência - classes (através de ponteiros) - posição da memória fica lá dentro
Tipos de Valor(primitivos) - caixas em que valor fica lá dentro

Garbage collector - monitoriza os objetos alocados pelo programa (no heap) e desaloca os que não estão a ser utilizados
Ou seja - se o ponteiro desaparecer o que está no solto no Heap desaparece
Product P1 = new Product(...);
Product P2 = new Product(...);
P1 = P2;
//O que está no Heap do P1 (para onde apontava) será eliminado, pois apontará para o mesmo de P2

Desalocação por escopo - elimina as váriáveis primitivas que não serão precisas (p. ex. dentro de um if)